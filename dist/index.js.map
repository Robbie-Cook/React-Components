{"version":3,"file":"index.js","sources":["../src/Dimensions.js","../src/Spacer.js","../src/Colors.js","../src/animation/TransitionWrapper.js"],"sourcesContent":["// Class converting css-style dimensions (padding etc.) to an object\r\nclass Dimensions {\r\n  // e.g. padding: 0 5px;\r\n  constructor(top, right, bottom = top, left = right) {\r\n    // String values given\r\n    if (typeof top === \"string\") {\r\n      this.top = top\r\n      this.right = right\r\n      this.bottom = bottom\r\n      this.left = left\r\n    } else {\r\n      // Numeric values given\r\n      this.top = `${top}px`\r\n      this.right = `${right}px`\r\n      this.bottom = `${bottom}px`\r\n      this.left = `${left}px`\r\n    }\r\n  }\r\n\r\n  toString() {\r\n    return `${this.top} ${this.right} ${this.bottom} ${this.left}`\r\n  }\r\n}\r\n\r\nexport default Dimensions","import React, { Component } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport PropTypes from \"prop-types\"\r\nimport Dimensions from \"./Dimensions\"\r\n\r\n/**\r\n * Component for providing space in a UI\r\n *\r\n * Values must be given like so\r\n * <Spacer width=\"40px\" />\r\n */\r\nclass Spacer extends Component {\r\n  render() {\r\n    const Spacer = styled.div`\r\n      height: ${this.props.height};\r\n      width: ${this.props.width};\r\n    `\r\n\r\n    return <Spacer />\r\n  }\r\n}\r\nSpacer.propTypes = {\r\n  width: PropTypes.string,\r\n  height: PropTypes.string,\r\n}\r\n\r\nexport default Spacer\r\n","/*\r\nStyling for entire website. All common variables are being migrated here from\r\ncss/global-styles.css. \r\n\r\nThis is to be replaced with React.Context, where this is an object passed \r\nthrough a color context\r\n*/\r\nclass Colors {\r\n  static textColor = \"#dcd6ce\"\r\n  static backgroundColor = \"#0f0f0f\"\r\n  \r\n  // Link color\r\n  static link = {\r\n      color: '#6385a9', // also defined in global-styles.css\r\n      colorActive: '#1565c0',\r\n      colorHighlight: '#6385a9'\r\n  }\r\n\r\n  static text = {\r\n      color: '#dcd6ce' // also defined in global-styles.css\r\n  }\r\n\r\n  static page = {\r\n    backgroundColor: '#0f0f0f',\r\n    secondaryColor: '#EB6D6D', // reddish\r\n  }\r\n}\r\n\r\nexport default Colors\r\n","import styled from \"styled-components\"\r\nimport posed from \"react-pose\"\r\nimport Colors from \"../Colors\"\r\nimport React, { PureComponent } from \"react\"\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faCircleNotch } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\n/**\r\n * A loading screen\r\n */\r\nclass TransitionWrapper extends PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  PosedDiv = posed.div({\r\n    visible: {\r\n      opacity: 1,\r\n      height: \"auto\",\r\n    },\r\n    hidden: {\r\n      opacity: 0,\r\n      height: \"0px\",\r\n      transition: {\r\n        default: { ease: \"linear\", duration: 100 },\r\n      },\r\n    },\r\n  })\r\n\r\n  StyledDiv = styled(this.PosedDiv)``\r\n\r\n  SpinnerWrapper = styled.div`\r\n    min-width: 100px;\r\n    color: ${Colors.text.color};\r\n    animation-name: spin;\r\n    animation-duration: 2500ms;\r\n    animation-iteration-count: infinite;\r\n    animation-timing-function: linear;\r\n\r\n    @keyframes spin {\r\n      from {\r\n        transform: rotate(0deg);\r\n      }\r\n      to {\r\n        transform: rotate(360deg);\r\n      }\r\n    }\r\n  `\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <this.StyledDiv pose={this.props.loaded ? \"hidden\" : \"visible\"}>\r\n          <this.SpinnerWrapper>\r\n            <FontAwesomeIcon\r\n              style={{ fontSize: \"65px\", display: \"flex\", margin: \"auto\" }}\r\n              icon={faCircleNotch}\r\n            />\r\n          </this.SpinnerWrapper>\r\n        </this.StyledDiv>\r\n        <this.StyledDiv pose={this.props.loaded ? \"visible\" : \"hidden\"}>\r\n          {this.props.children}\r\n        </this.StyledDiv>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TransitionWrapper\r\n"],"names":["Spacer","Component","render","styled","div","props","height","width","React","propTypes","PropTypes","string","Colors","color","colorActive","colorHighlight","backgroundColor","secondaryColor","TransitionWrapper","PureComponent","constructor","posed","visible","opacity","hidden","transition","default","ease","duration","PosedDiv","text","loaded","FontAwesomeIcon","fontSize","display","margin","faCircleNotch","children"],"mappings":";;;;;;;;;;;;;;AAAA;;ACKA;;;;;;;AAMA,MAAMA,MAAN,SAAqBC,eAArB,CAA+B;EAC7BC,MAAM,GAAG;UACDF,MAAM,GAAGG,MAAM,CAACC,GAAI;gBACd,KAAKC,KAAL,CAAWC,MAAO;eACnB,KAAKD,KAAL,CAAWE,KAAM;KAF5B;WAKOC,6BAAC,MAAD,OAAP;;;;;AAGJR,MAAM,CAACS,SAAP,GAAmB;EACjBF,KAAK,EAAEG,SAAS,CAACC,MADA;EAEjBL,MAAM,EAAEI,SAAS,CAACC;CAFpB;;;;;;;;;;;;;;;;;ACrBA;;;;;;;AAOA,MAAMC,MAAN,CAAa;;gBAAPA,qBACe;;gBADfA,2BAEqB;;gBAFrBA,gBAKU;EACVC,KAAK,EAAE,SADG;;EAEVC,WAAW,EAAE,SAFH;EAGVC,cAAc,EAAE;;;gBARhBH,gBAWU;EACVC,KAAK,EAAE,SADG;;;;gBAXVD,gBAeU;EACZI,eAAe,EAAE,SADL;EAEZC,cAAc,EAAE,SAFJ;;;;ACdhB;;;;AAGA,MAAMC,iBAAN,SAAgCC,mBAAhC,CAA8C;EAC5CC,WAAW,CAACf,KAAD,EAAQ;UACXA,KAAN;;sCAGSgB,KAAK,CAACjB,GAAN,CAAU;MACnBkB,OAAO,EAAE;QACPC,OAAO,EAAE,CADF;QAEPjB,MAAM,EAAE;OAHS;MAKnBkB,MAAM,EAAE;QACND,OAAO,EAAE,CADH;QAENjB,MAAM,EAAE,KAFF;QAGNmB,UAAU,EAAE;UACVC,OAAO,EAAE;YAAEC,IAAI,EAAE,QAAR;YAAkBC,QAAQ,EAAE;;;;KAThC,CAJQ;;uCAkBPzB,MAAM,CAAC,KAAK0B,QAAN,CAAgB,EAlBf;;4CAoBF1B,MAAM,CAACC,GAAI;;aAEjBQ,MAAM,CAACkB,IAAP,CAAYjB,KAAM;;;;;;;;;;;;;;GAtBV;;;EAsCnBX,MAAM,GAAG;WAELM,6BAACA,cAAD,CAAO,QAAP,QACEA,kCAAM,SAAN;MAAgB,IAAI,EAAE,KAAKH,KAAL,CAAW0B,MAAX,GAAoB,QAApB,GAA+B;OACnDvB,kCAAM,cAAN,QACEA,6BAACwB,gCAAD;MACE,KAAK,EAAE;QAAEC,QAAQ,EAAE,MAAZ;QAAoBC,OAAO,EAAE,MAA7B;QAAqCC,MAAM,EAAE;OADtD;MAEE,IAAI,EAAEC;MAHV,CADF,CADF,EASE5B,kCAAM,SAAN;MAAgB,IAAI,EAAE,KAAKH,KAAL,CAAW0B,MAAX,GAAoB,SAApB,GAAgC;OACnD,KAAK1B,KAAL,CAAWgC,QADd,CATF,CADF;;;;;;;;"}